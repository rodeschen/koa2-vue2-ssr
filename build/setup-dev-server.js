import path from 'path';
import webpack from 'webpack';
import MFS from 'memory-fs';
import clientConfig from './webpack.client.config';
import serverConfig from './webpack.server.config';
import { devMiddleware, hotMiddleware } from 'koa-webpack-middleware';
const readFile = (fs, file) => {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {}
}

export default function setupDevServer(app, cb) {
    let bundle, clientManifest
    let resolve
    const readyPromise = new Promise(r => { resolve = r })
    const ready = (...args) => {
        resolve()
        console.log("call");
        cb(...args)
    }

    // modify client config to work with hot middleware
    clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
    clientConfig.output.filename = '[name].js'
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    )

    // dev middleware
    const clientCompiler = webpack(clientConfig)

    const myDevMiddleware = devMiddleware(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        noInfo: true
    })
    app.use(myDevMiddleware)
    clientCompiler.plugin('done', stats => {
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))
        if (stats.errors.length) return

        clientManifest = JSON.parse(readFile(
            clientCompiler.outputFileSystem,
            'vue-ssr-client-manifest.json'
        ));
        if (bundle) {
            ready(bundle, {
                clientManifest
            })
        }
    })

    // hot middleware
    app.use(hotMiddleware(clientCompiler, { heartbeat: 5000 }))

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig)
    const mfs = new MFS()
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err
        stats = stats.toJson()
        if (stats.errors.length) return

        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
        if (clientManifest) {
            ready(bundle, {
                clientManifest
            })
        }
    })

    return readyPromise
}